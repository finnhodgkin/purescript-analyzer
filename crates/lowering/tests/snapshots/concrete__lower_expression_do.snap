---
source: crates/lowering/tests/concrete.rs
expression: "&lower.source_map"
snapshot_kind: text
---
SourceMap {
    types: {},
    binders: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderWildcard,
                range: 46..50,
            },
        }: Wildcard,
    },
    expressions: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 34..41,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 41..46,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionApplicationChain,
                range: 34..46,
            },
        }: ApplicationChain {
            head: Some(
                Id<syntax::cst::Expression>(0),
            ),
            tail: [
                Expression(
                    Some(
                        Id<syntax::cst::Expression>(1),
                    ),
                ),
            ],
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 53..58,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 58..63,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionApplicationChain,
                range: 53..63,
            },
        }: ApplicationChain {
            head: Some(
                Id<syntax::cst::Expression>(3),
            ),
            tail: [
                Expression(
                    Some(
                        Id<syntax::cst::Expression>(4),
                    ),
                ),
            ],
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 77..82,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 82..84,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionApplicationChain,
                range: 77..84,
            },
        }: ApplicationChain {
            head: Some(
                Id<syntax::cst::Expression>(6),
            ),
            tail: [
                Expression(
                    Some(
                        Id<syntax::cst::Expression>(7),
                    ),
                ),
            ],
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 84..91,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 91..96,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionApplicationChain,
                range: 84..96,
            },
        }: ApplicationChain {
            head: Some(
                Id<syntax::cst::Expression>(9),
            ),
            tail: [
                Expression(
                    Some(
                        Id<syntax::cst::Expression>(10),
                    ),
                ),
            ],
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionDo,
                range: 25..96,
            },
        }: Do {
            qualifier: Some(
                "Hooks.",
            ),
            statements: [
                Discard {
                    expression: Some(
                        Id<syntax::cst::Expression>(2),
                    ),
                },
                Bind {
                    binder: Some(
                        Id<syntax::cst::Binder>(0),
                    ),
                    expression: Some(
                        Id<syntax::cst::Expression>(5),
                    ),
                },
                Let {
                    statements: [
                        Id<syntax::cst::LetBinding>(0),
                    ],
                },
                Discard {
                    expression: Some(
                        Id<syntax::cst::Expression>(11),
                    ),
                },
            ],
        },
    },
    let_bindings: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: LetBindingEquation,
                range: 69..84,
            },
        }: Id<lowering::concrete::LetBinding>(0),
    },
    let_bindings_grouped: [
        Value {
            name: Some(
                "a",
            ),
            signature: None,
            equations: [
                LoweredEquation {
                    binders: [],
                    guarded: Some(
                        Unconditional {
                            where_expression: Some(
                                WhereExpression {
                                    expression: Some(
                                        Id<syntax::cst::Expression>(8),
                                    ),
                                    bindings: [],
                                },
                            ),
                        },
                    ),
                },
            ],
        },
    ],
}
