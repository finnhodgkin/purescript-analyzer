---
source: crates/lowering/tests/concrete.rs
expression: "&lower.source_map"
snapshot_kind: text
---
SourceMap {
    types: {},
    binders: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderWildcard,
                range: 35..39,
            },
        }: Wildcard,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderVariable,
                range: 62..64,
            },
        }: Variable,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderWildcard,
                range: 68..72,
            },
        }: Wildcard,
    },
    expressions: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 42..49,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "action",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 66..68,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "a",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 75..82,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "action",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 87..94,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "result",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionAdo,
                range: 25..94,
            },
        }: Ado {
            qualifier: Some(
                "Hooks.",
            ),
            statements: [
                Bind {
                    binder: Some(
                        Id<syntax::cst::Binder>(0),
                    ),
                    expression: Some(
                        Id<syntax::cst::Expression>(0),
                    ),
                },
                Let {
                    statements: [
                        Id<syntax::cst::LetBinding>(0),
                    ],
                },
                Bind {
                    binder: Some(
                        Id<syntax::cst::Binder>(2),
                    ),
                    expression: Some(
                        Id<syntax::cst::Expression>(2),
                    ),
                },
            ],
            expression: Some(
                Id<syntax::cst::Expression>(3),
            ),
        },
    },
    let_bindings: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: LetBindingEquation,
                range: 55..68,
            },
        }: Id<lowering::concrete::LetBinding>(0),
    },
    let_bindings_grouped: [
        Value {
            name: Some(
                "id",
            ),
            signature: None,
            equations: [
                LoweredEquation {
                    binders: [
                        Id<syntax::cst::Binder>(1),
                    ],
                    guarded: Some(
                        Unconditional {
                            where_expression: Some(
                                WhereExpression {
                                    expression: Some(
                                        Id<syntax::cst::Expression>(1),
                                    ),
                                    bindings: [],
                                },
                            ),
                        },
                    ),
                },
            ],
        },
    ],
}
