---
source: crates/lowering/tests/concrete.rs
expression: "&lower.source_map"
snapshot_kind: text
---
SourceMap {
    types: {},
    binders: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderVariable,
                range: 33..37,
            },
        }: Variable {
            name: Some(
                "a",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderVariable,
                range: 39..41,
            },
        }: Variable {
            name: Some(
                "b",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderVariable,
                range: 52..54,
            },
        }: Variable {
            name: Some(
                "d",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: BinderVariable,
                range: 65..67,
            },
        }: Variable {
            name: Some(
                "f",
            ),
        },
    },
    expressions: {
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionSection,
                range: 28..30,
            },
        }: Section,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 44..46,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "c",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 57..59,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "e",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionVariable,
                range: 70..72,
            },
        }: Variable {
            qualifier: None,
            name: Some(
                "g",
            ),
        },
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionInteger,
                range: 75..77,
            },
        }: Integer,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionTrue,
                range: 83..88,
            },
        }: True,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionInteger,
                range: 91..93,
            },
        }: Integer,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionFalse,
                range: 99..105,
            },
        }: False,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionInteger,
                range: 108..110,
            },
        }: Integer,
        AstPtr {
            raw: SyntaxNodePtr {
                kind: ExpressionCaseOf,
                range: 23..110,
            },
        }: CaseOf {
            trunk: [
                Id<syntax::cst::Expression>(0),
            ],
            branches: [
                CaseBranch {
                    binders: [
                        Id<syntax::cst::Binder>(0),
                    ],
                    guarded_expression: Some(
                        Conditionals {
                            pattern_guarded: [
                                PatternGuarded {
                                    pattern_guards: [
                                        PatternGuard {
                                            binder: Some(
                                                Id<syntax::cst::Binder>(1),
                                            ),
                                            expression: Some(
                                                Id<syntax::cst::Expression>(1),
                                            ),
                                        },
                                        PatternGuard {
                                            binder: Some(
                                                Id<syntax::cst::Binder>(2),
                                            ),
                                            expression: Some(
                                                Id<syntax::cst::Expression>(2),
                                            ),
                                        },
                                        PatternGuard {
                                            binder: Some(
                                                Id<syntax::cst::Binder>(3),
                                            ),
                                            expression: Some(
                                                Id<syntax::cst::Expression>(3),
                                            ),
                                        },
                                    ],
                                    where_expression: Some(
                                        WhereExpression {
                                            expression: Some(
                                                Id<syntax::cst::Expression>(4),
                                            ),
                                            bindings: [],
                                        },
                                    ),
                                },
                                PatternGuarded {
                                    pattern_guards: [
                                        PatternGuard {
                                            binder: None,
                                            expression: Some(
                                                Id<syntax::cst::Expression>(5),
                                            ),
                                        },
                                    ],
                                    where_expression: Some(
                                        WhereExpression {
                                            expression: Some(
                                                Id<syntax::cst::Expression>(6),
                                            ),
                                            bindings: [],
                                        },
                                    ),
                                },
                                PatternGuarded {
                                    pattern_guards: [
                                        PatternGuard {
                                            binder: None,
                                            expression: Some(
                                                Id<syntax::cst::Expression>(7),
                                            ),
                                        },
                                    ],
                                    where_expression: Some(
                                        WhereExpression {
                                            expression: Some(
                                                Id<syntax::cst::Expression>(8),
                                            ),
                                            bindings: [],
                                        },
                                    ),
                                },
                            ],
                        },
                    ),
                },
            ],
        },
    },
    let_bindings: {},
    let_bindings_grouped: [],
}
