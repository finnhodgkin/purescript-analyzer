module Main 
  ( id
  , id
  , unit
  , unit
  , class Eq
  , class Eq
  , Maybe(..)
  , Maybe(..)
  , Id(Id)
  , Id(Id)
  , MaybeId
  , MaybeId
  , Unit
  , Unit
  , (+)
  , (+)
  , type (+)
  , type (+)
  , module Exports
  , module Exports
  ) where

import Prelude
import Data.List as List
import Data.Set as Exports
import Data.Map as Exports

id :: forall a. a -> a
id a = a

data Maybe :: Type -> Type
data Maybe a = Just a | Nothing

newtype Id :: Type -> Type
newtype Id a = Id Int

type role Id nominal

type MaybeId :: Type
type MaybeId = Maybe Id

class Eq :: Type -> Constraint
class Eq a where
  eq :: a -> a -> Boolean

instance eqInt :: Eq Int where
  eq = eqIntImpl

instance Ord Int where
  compare = compareIntImpl

derive instance eqId :: Eq Id

foreign import unit :: Unit
foreign import data Unit :: Type

infix 5 add as +
infix 5 type Tuple as +
