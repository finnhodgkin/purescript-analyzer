module Main where

id :: forall a. a -> a
id :: forall a. a -> a

data Maybe a = Just a | Nothing
data Maybe a = Just a | Nothing

newtype Id a = Id Int
newtype Id a = Id Int

class Eq a where
  eq :: a -> a -> Boolean

class Eq a where
  eq :: a -> a -> Boolean

instance eqInt :: Eq Int where
  eq = eqIntImpl

instance eqInt :: Eq Int where
  eq = eqIntImpl

derive instance eqId :: Eq Id
derive instance eqId :: Eq Id

foreign import unit :: Unit
foreign import unit :: Unit

foreign import data Unit :: Type
foreign import data Unit :: Type

infix 5 add as +
infix 5 add as +

infix 5 type Tuple as +
infix 5 type Tuple as +
