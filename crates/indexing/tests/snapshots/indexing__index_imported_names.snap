---
source: crates/indexing/tests/indexing.rs
expression: snapshot
snapshot_kind: text
---
Index {
    export_kind: Implicit,
    term_item: Arena {
        len: 0,
        data: [],
    },
    type_item: Arena {
        len: 0,
        data: [],
    },
    term_export: {},
    type_export: {},
    import_items: {
        Idx::<ImportStatement>>(0): ImportItems {
            name: Some(
                "Lib",
            ),
            alias: None,
            kind: Explicit,
            terms: {
                "value": Idx::<ImportItem>>(0),
                "Just": Idx::<ImportItem>>(4),
                "Nothing": Idx::<ImportItem>>(4),
                "(+)": Idx::<ImportItem>>(5),
            },
            types: {
                "Class": (
                    Idx::<ImportItem>>(1),
                    None,
                ),
                "Type": (
                    Idx::<ImportItem>>(2),
                    None,
                ),
                "Data": (
                    Idx::<ImportItem>>(3),
                    Some(
                        Everything,
                    ),
                ),
                "Maybe": (
                    Idx::<ImportItem>>(4),
                    Some(
                        Enumerated(
                            [
                                "Just",
                                "Nothing",
                            ],
                        ),
                    ),
                ),
                "(+)": (
                    Idx::<ImportItem>>(6),
                    None,
                ),
            },
            exported: false,
        },
    },
    term_nominal: {},
    type_nominal: {},
}
Relational {
    data: [],
    class: [],
    chain: [],
    instance: [],
}
IndexingSource {
    export: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    import: AstPtrMap {
        arena: Arena {
            len: 7,
            data: [
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportValue,
                        range: 31..36,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportClass,
                        range: 37..49,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportType,
                        range: 50..55,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportType,
                        range: 56..65,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportType,
                        range: 66..87,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportOperator,
                        range: 88..92,
                    },
                },
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportTypeOperator,
                        range: 93..102,
                    },
                },
            ],
        },
        table: {
            Idx::<ImportItem>>(6),
            Idx::<ImportItem>>(0),
            Idx::<ImportItem>>(1),
            Idx::<ImportItem>>(2),
            Idx::<ImportItem>>(3),
            Idx::<ImportItem>>(4),
            Idx::<ImportItem>>(5),
        },
    },
    import_statement: AstPtrMap {
        arena: Arena {
            len: 1,
            data: [
                AstPtr {
                    raw: SyntaxNodePtr {
                        kind: ImportStatement,
                        range: 17..103,
                    },
                },
            ],
        },
        table: {
            Idx::<ImportStatement>>(0),
        },
    },
    data_signature: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    data_equation: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    data_constructor: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    newtype_signature: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    newtype_equation: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    type_role: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    type_signature: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    type_equation: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    class_signature: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    class_declaration: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    class_member: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    value_signature: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    value_equation: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    chain: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    instance: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    instance_member: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    derive: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    infix: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    foreign_data: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
    foreign_value: AstPtrMap {
        arena: Arena {
            len: 0,
            data: [],
        },
        table: {},
    },
}
[]
