---
source: crates/parsing/tests/grammar_tests.rs
expression: result
---
Input: 
do
  let
    a :: Int
    a = 0

    f x = x
    g (Tuple y z) = y + z

    Tuple a b = Tuple 0 1

  x <- f
  Tuple a b <- f
  (Left a) <- f

  pure hello
    
Start { kind: DoExpression }
  Start { kind: QualifiedDo }
    Token { kind: DoKw }
  Finish
  Start { kind: OneOrMore }
    Start { kind: DoLetBinding }
      Token { kind: LetKw }
      Start { kind: OneOrMore }
        Start { kind: LetBindingSignature }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Token { kind: Upper }
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
          Finish
          Token { kind: Equal }
          Start { kind: LiteralExpression }
            Token { kind: LiteralInteger }
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
          Finish
          Token { kind: Equal }
          Start { kind: VariableExpression }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Lower }
              Finish
            Finish
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
            Start { kind: ParenthesizedBinder }
              Token { kind: LeftParenthesis }
              Start { kind: ConstructorBinder }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Upper }
                  Finish
                Finish
                Start { kind: OneOrMore }
                  Start { kind: VariableBinder }
                    Start { kind: Name }
                      Token { kind: Lower }
                    Finish
                  Finish
                  Start { kind: VariableBinder }
                    Start { kind: Name }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
              Token { kind: RightParenthesis }
            Finish
          Finish
          Token { kind: Equal }
          Start { kind: ExpressionOperatorChain }
            Start { kind: VariableExpression }
              Start { kind: QualifiedName }
                Start { kind: NameRef }
                  Token { kind: Lower }
                Finish
              Finish
            Finish
            Start { kind: OneOrMore }
              Start { kind: Pair }
                Token { kind: Operator }
                Start { kind: VariableExpression }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Start { kind: LetBindingPattern }
          Start { kind: ConstructorBinder }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Upper }
              Finish
            Finish
            Start { kind: OneOrMore }
              Start { kind: VariableBinder }
                Start { kind: Name }
                  Token { kind: Lower }
                Finish
              Finish
              Start { kind: VariableBinder }
                Start { kind: Name }
                  Token { kind: Lower }
                Finish
              Finish
            Finish
          Finish
          Token { kind: Equal }
          Start { kind: ApplicationExpression }
            Start { kind: ConstructorExpression }
              Start { kind: QualifiedName }
                Start { kind: NameRef }
                  Token { kind: Upper }
                Finish
              Finish
            Finish
            Start { kind: OneOrMore }
              Start { kind: TermArgument }
                Start { kind: LiteralExpression }
                  Token { kind: LiteralInteger }
                Finish
              Finish
              Start { kind: TermArgument }
                Start { kind: LiteralExpression }
                  Token { kind: LiteralInteger }
                Finish
              Finish
            Finish
          Finish
        Finish
      Finish
    Finish
    Start { kind: DoBind }
      Start { kind: VariableBinder }
        Start { kind: Name }
          Token { kind: Lower }
        Finish
      Finish
      Token { kind: LeftArrow }
      Start { kind: VariableExpression }
        Start { kind: QualifiedName }
          Start { kind: NameRef }
            Token { kind: Lower }
          Finish
        Finish
      Finish
    Finish
    Start { kind: DoBind }
      Start { kind: ConstructorBinder }
        Start { kind: QualifiedName }
          Start { kind: NameRef }
            Token { kind: Upper }
          Finish
        Finish
        Start { kind: OneOrMore }
          Start { kind: VariableBinder }
            Start { kind: Name }
              Token { kind: Lower }
            Finish
          Finish
          Start { kind: VariableBinder }
            Start { kind: Name }
              Token { kind: Lower }
            Finish
          Finish
        Finish
      Finish
      Token { kind: LeftArrow }
      Start { kind: VariableExpression }
        Start { kind: QualifiedName }
          Start { kind: NameRef }
            Token { kind: Lower }
          Finish
        Finish
      Finish
    Finish
    Start { kind: DoBind }
      Start { kind: ParenthesizedBinder }
        Token { kind: LeftParenthesis }
        Start { kind: ConstructorBinder }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Upper }
            Finish
          Finish
          Start { kind: OneOrMore }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
          Finish
        Finish
        Token { kind: RightParenthesis }
      Finish
      Token { kind: LeftArrow }
      Start { kind: VariableExpression }
        Start { kind: QualifiedName }
          Start { kind: NameRef }
            Token { kind: Lower }
          Finish
        Finish
      Finish
    Finish
    Start { kind: DoDiscard }
      Start { kind: ApplicationExpression }
        Start { kind: VariableExpression }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Lower }
            Finish
          Finish
        Finish
        Start { kind: OneOrMore }
          Start { kind: TermArgument }
            Start { kind: VariableExpression }
              Start { kind: QualifiedName }
                Start { kind: NameRef }
                  Token { kind: Lower }
                Finish
              Finish
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
Finish

