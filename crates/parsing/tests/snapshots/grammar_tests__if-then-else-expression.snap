---
source: crates/parsing/tests/grammar_tests.rs
expression: result
---
Input: if f x then g + y else h `finally` z
Start { kind: IfThenElseExpression }
  Token { kind: IfKw }
  Start { kind: ApplicationExpression }
    Start { kind: VariableExpression }
      Start { kind: QualifiedName }
        Start { kind: NameRef }
          Token { kind: Lower }
        Finish
      Finish
    Finish
    Start { kind: OneOrMore }
      Start { kind: TermArgument }
        Start { kind: VariableExpression }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Lower }
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
  Token { kind: ThenKw }
  Start { kind: ExpressionOperatorChain }
    Start { kind: VariableExpression }
      Start { kind: QualifiedName }
        Start { kind: NameRef }
          Token { kind: Lower }
        Finish
      Finish
    Finish
    Start { kind: OneOrMore }
      Start { kind: Pair }
        Token { kind: Operator }
        Start { kind: VariableExpression }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Lower }
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
  Token { kind: ElseKw }
  Start { kind: ExpressionInfixChain }
    Start { kind: VariableExpression }
      Start { kind: QualifiedName }
        Start { kind: NameRef }
          Token { kind: Lower }
        Finish
      Finish
    Finish
    Start { kind: OneOrMore }
      Start { kind: Pair }
        Start { kind: Wrapped }
          Token { kind: Tick }
          Start { kind: VariableExpression }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Lower }
              Finish
            Finish
          Finish
          Token { kind: Tick }
        Finish
        Start { kind: VariableExpression }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Lower }
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
Finish

