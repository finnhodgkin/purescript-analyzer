---
source: crates/parsing/tests/grammar_tests.rs
expression: result
---
Input: 
do
  let 
    _ = a + b
      where 
        a = 2
        b = 2
    
Start { kind: DoExpression }
  Start { kind: QualifiedDo }
    Token { kind: DoKw }
  Finish
  Start { kind: OneOrMore }
    Start { kind: DoLetBinding }
      Token { kind: LetKw }
      Start { kind: OneOrMore }
        Start { kind: LetBindingPattern }
          Start { kind: WildcardBinder }
            Token { kind: Underscore }
          Finish
          Token { kind: Equal }
          Start { kind: WhereExpression }
            Start { kind: ExpressionOperatorChain }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
              Start { kind: OneOrMore }
                Start { kind: Pair }
                  Token { kind: Operator }
                  Start { kind: VariableExpression }
                    Start { kind: QualifiedName }
                      Start { kind: NameRef }
                        Token { kind: Lower }
                      Finish
                    Finish
                  Finish
                Finish
              Finish
            Finish
            Token { kind: WhereKw }
            Start { kind: OneOrMore }
              Start { kind: LetBindingName }
                Start { kind: Name }
                  Token { kind: Lower }
                Finish
                Start { kind: ZeroOrMore }
                Finish
                Token { kind: Equal }
                Start { kind: LiteralExpression }
                  Token { kind: LiteralInteger }
                Finish
              Finish
              Start { kind: LetBindingName }
                Start { kind: Name }
                  Token { kind: Lower }
                Finish
                Start { kind: ZeroOrMore }
                Finish
                Token { kind: Equal }
                Start { kind: LiteralExpression }
                  Token { kind: LiteralInteger }
                Finish
              Finish
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
Finish

