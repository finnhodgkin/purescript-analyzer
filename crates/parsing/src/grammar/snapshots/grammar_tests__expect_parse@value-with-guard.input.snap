---
source: crates/parsing/tests/grammar_tests.rs
expression: result
input_file: crates/parsing/tests/inputs/passing/declaration/value-with-guard.input
---
Input: hello
  | true, x <- a = 0
  | false, y <- b = 1

Start { kind: ValueDeclaration }
  Start { kind: Name }
    Token { kind: Lower }
  Finish
  Start { kind: ZeroOrMore }
  Finish
  Start { kind: Guarded }
    Start { kind: OneOrMore }
      Start { kind: GuardedExpression }
        Token { kind: Pipe }
        Start { kind: Separated }
          Start { kind: PatternGuard }
            Start { kind: LiteralExpression }
              Token { kind: LiteralTrue }
            Finish
          Finish
          Token { kind: Comma }
          Start { kind: PatternGuard }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
            Token { kind: LeftArrow }
            Start { kind: VariableExpression }
              Start { kind: QualifiedName }
                Start { kind: NameRef }
                  Token { kind: Lower }
                Finish
              Finish
            Finish
          Finish
        Finish
        Token { kind: Equal }
        Start { kind: WhereExpression }
          Start { kind: LiteralExpression }
            Token { kind: LiteralInteger }
          Finish
        Finish
      Finish
      Start { kind: GuardedExpression }
        Token { kind: Pipe }
        Start { kind: Separated }
          Start { kind: PatternGuard }
            Start { kind: LiteralExpression }
              Token { kind: LiteralFalse }
            Finish
          Finish
          Token { kind: Comma }
          Start { kind: PatternGuard }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
            Token { kind: LeftArrow }
            Start { kind: VariableExpression }
              Start { kind: QualifiedName }
                Start { kind: NameRef }
                  Token { kind: Lower }
                Finish
              Finish
            Finish
          Finish
        Finish
        Token { kind: Equal }
        Start { kind: WhereExpression }
          Start { kind: LiteralExpression }
            Token { kind: LiteralInteger }
          Finish
        Finish
      Finish
    Finish
  Finish
Finish

