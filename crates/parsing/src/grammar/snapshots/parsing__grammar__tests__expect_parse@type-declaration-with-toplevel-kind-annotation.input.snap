---
source: crates/parsing/src/grammar/tests.rs
expression: result
input_file: crates/parsing/src/grammar/inputs/passing/file/type-declaration-with-toplevel-kind-annotation.input
---
Input: module A where

type A :: A
type A (a :: A) a = A

Start { kind: Module }
  Start { kind: ModuleHeader }
    Token { kind: ModuleKw }
    Start { kind: ModuleName }
      Start { kind: Name }
        Token { kind: Upper }
      Finish
    Finish
    Token { kind: WhereKw }
  Finish
  Token { kind: LayoutStart }
  Start { kind: ModuleImports }
  Finish
  Start { kind: ModuleBody }
    Start { kind: ZeroOrMore }
      Start { kind: TypeDeclarationSignature }
        Token { kind: TypeKw }
        Start { kind: Name }
          Token { kind: Upper }
        Finish
        Token { kind: Colon2 }
        Start { kind: ConstructorType }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Upper }
            Finish
          Finish
        Finish
      Finish
      Token { kind: LayoutSep }
      Start { kind: TypeDeclaration }
        Token { kind: TypeKw }
        Start { kind: Name }
          Token { kind: Upper }
        Finish
        Start { kind: SynonymVariables }
          Start { kind: TypeVariableKinded }
            Start { kind: Wrapped }
              Token { kind: LeftParenthesis }
              Start { kind: Labeled }
                Start { kind: Name }
                  Token { kind: Lower }
                Finish
                Token { kind: Colon2 }
                Start { kind: ConstructorType }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Upper }
                    Finish
                  Finish
                Finish
              Finish
              Token { kind: RightParenthesis }
            Finish
          Finish
          Start { kind: TypeVariableName }
            Start { kind: Name }
              Token { kind: Lower }
            Finish
          Finish
        Finish
        Token { kind: Equal }
        Start { kind: ConstructorType }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Upper }
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
  Token { kind: LayoutEnd }
Finish

